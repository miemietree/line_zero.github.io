<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/post/0.html"/>
    <url>/post/0.html</url>
    
    <content type="html"><![CDATA[<h1 id="华为云动态博客搭建"><a href="#华为云动态博客搭建" class="headerlink" title="华为云动态博客搭建"></a>华为云动态博客搭建</h1><h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h2><ul><li>建立项目</li></ul><p>（1）点击新建项目</p><p>（2）空白项目-&gt;Scrum</p><p>（3）命名，确认</p><ul><li>新建仓库</li></ul><p>（1）点击代码托管，点击普通新建</p><p>出现仓库名即可</p><img src="/post/undefined/p1.png" class="" title="图片1"><h2 id="2-代码托管"><a href="#2-代码托管" class="headerlink" title="2.代码托管"></a>2.代码托管</h2><p>打开本地shell </p><p>（1）ssh 连接本地项目文件</p><p>详细步骤见连接：</p><p> <a href="https://support.huaweicloud.com/usermanual-codehub/codehub_ug_8002.html">https://support.huaweicloud.com/usermanual-codehub/codehub_ug_8002.html</a></p><p>​        生成密钥</p><ul><li><p>```shell<br>ssh-keygen -t rsa -C “你的QQ邮箱”</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  复制密钥<br><br>- ```shell<br>  clip &lt; ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>如果运行不了clip指令，则直接打开相应文件(例如使用code打开)，打开后复制</p></li><li><p>打开华为云控制台项目，打开代码托管，点击设置我的SSH密码</p><img src="/post/undefined/p2.png" class="" title="图片1"></li><li><p>点击右上角添加SSH密钥</p><img src="/post/undefined/p3.png" class="" title="图片1"></li><li><p>输入密钥，点击确认</p><img src="/post/undefined/p4.png" class="" title="图片1"></li></ul><p>（2）在本地文件夹中克隆华为云blog项目</p><ul><li><p>打开华为云blog项目代码托管，点击仓库名称，见下图，复制框内内容</p><img src="/post/undefined/p5.png" class="" title="图片1"></li><li><p>打开命令行，输入以下命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone 上面复制的内容<br></code></pre></td></tr></table></figure><p>本地将生成一个项目对应的文件夹，和你的项目名称相同</p><p>【以项目temp为例，下图为克隆后生成的文件夹】</p><img src="/post/undefined/p6.png" class="" title="图片1"><p>文件夹下将生成一个.git文件</p><img src="/post/undefined/p7.png" class="" title="图片1"><ul><li><p>打开blog项目文件(预先下载的那个)</p><p>将你打开的文件夹中，.git文件之外的所有文件复制到前面生成的文件夹中</p></li></ul><p>（3）提交仓库</p><p>提交命令如下，定位到本地，执行git的三条指令，即可完成推送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd 本地项目文件地址（例如前文的temp)<br>//查看状态，包含修改与更新的内容<br>git status <br>//提交到仓库<br>git add .  //注意空格<br>//再次输入 git status 查看结果，全都变成绿色状态<br>//&quot; &quot;内自定义输入信息。例如&quot;first commit&quot;<br>git commit -m &quot;...&quot;<br>git push origin master<br></code></pre></td></tr></table></figure><h2 id="3-编译构建"><a href="#3-编译构建" class="headerlink" title="3.编译构建"></a>3.编译构建</h2><p>（1）新建任务</p><p>点击右上角”新建任务“</p><img src="/post/undefined/p8.png" class="" title="图片1"><p>（2）点击下一步，在构建步骤中修改构建包路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./target/blog-0.0.1-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><img src="/post/undefined/p9.png" class="" title="图片1"><h2 id="4-部署"><a href="#4-部署" class="headerlink" title="4.部署"></a>4.部署</h2><p>（1）点击部署，新建任务，自定义名称</p><p>（2）勾选SpringBoot部署</p><img src="/post/undefined/p10.png" class="" title="图片1"><p>下面进入部署步骤</p><p>（3）停止SpringBoot 服务</p><p>选择主机组，将服务对应的绝对路径改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">&#123;spring_path&#125;/blog-0.0.1-SNAPSHOT.jar</span><br></code></pre></td></tr></table></figure><p><img src="file:///C:\Users\king\AppData\Roaming\Tencent\Users\1447284702\QQ\WinTemp\RichOle\3I}1@$L3QC6ZLI%MMPF99$N.png" alt="img"></p><p>（4）安装jdk：选择1.8.0版本</p><p>（5）选择部署来源</p><p>​    修改部署目录</p><img src="/post/undefined/p11.png" class="" title="图片1"><p>（6）启动SpringBoot 服务</p><p>修改同停止SpringBoot服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">&#123;spring_path&#125;/blog-0.0.1-SNAPSHOT.jar</span><br></code></pre></td></tr></table></figure><img src="/post/undefined/p12.png" class="" title="图片1"><p>（7）参数设置</p><img src="/post/undefined/p13.png" class="" title="图片1"><ul><li><p>主机组设置</p><p>返回首页点击通用设置</p><p>点击主机安全组</p><img src="/post/undefined/p14.png" class="" title="图片1"><p>密码：Hitwh18041</p></li><li><p>spring_path:   自定义    /root/…/blog   (…部分可以写成自己的名字拼音，方便)</p></li><li><p>port 端口号，可用80，8080，8090等</p></li><li><p>其他不用填</p></li></ul><p>（8）保存并执行</p><p>（9）建立流水线，完成修改后自动部署</p><ul><li>新建流水线，按下图添加</li></ul><img src="/post/undefined/p15.png" class="" title="图片1"><ul><li><p>触发事件添加</p><img src="/post/undefined/p16.png" class="" title="图片1"></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>M1 Macbook Air上手折腾记录</title>
    <link href="/post/5aff1b88.html"/>
    <url>/post/5aff1b88.html</url>
    
    <content type="html"><![CDATA[<h2 id="M1-Macbook-Air上手折腾记录"><a href="#M1-Macbook-Air上手折腾记录" class="headerlink" title="M1 Macbook Air上手折腾记录"></a>M1 Macbook Air上手折腾记录</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>一名计科大三学生。之前使用的是18年入学买的ASUS笔记本（i5-8250U+8G RAM+MX150），以下对比均以此为参考。M1电脑发布后，各路评测都把这款电脑吹的神乎其神，正巧发了奖学金便入手了16+512版本。</p><p>上手第一眼就是屏幕比原来好多了。此外感知最明显的就是性能和续航，性能确实很强，编译运行都很快，没抢到幻13，不能和zen3做个对比，续航也挺长的，以前开IDE必接电源，现在几天才充一次电。</p><h3 id="编程环境配置"><a href="#编程环境配置" class="headerlink" title="编程环境配置"></a>编程环境配置</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>系统自带Python2和Python3.8。</p><h5 id="Miniforge3"><a href="#Miniforge3" class="headerlink" title="Miniforge3"></a>Miniforge3</h5><p>我选择使用Miniforge3安装，网址如下<code>https://github.com/conda-forge/miniforge/</code>，选择arm64（Apple Silicon）即可，下载后<code>sh Miniforge3-MacOSX-arm64.sh</code>一路回车就装好了。</p><img src="/post/5aff1b88/pic1.png" class="" title="图片1"><p>基本上大部分都包都可以通过conda install和pip3 install解决，装好numpy, scipy, pandas, matplotlib等正常运行。</p><h5 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h5><p>因为实验室里都用Pytorch，也就没装TensorfLow。</p><p>Pytorch还没有适配M1，主要参考这个issue: <code>https://github.com/pytorch/pytorch/issues/48145#issuecomment-747631341</code>，最好是自己从源代码编译，我大概是编译了十几分钟，电脑第一次也是唯一一次很烫。</p><p>简单说一下从源代码编译过程：</p><ol><li><p>安装相关依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install setuptools cffi typing_extensions future six requests dataclasses pkg-config libuv<br></code></pre></td></tr></table></figure><p>也有可能需要装cmake</p></li><li><p>下载源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --recursive https://github.com/pytorch/pytorch<br>cd pytorch<br></code></pre></td></tr></table></figure></li><li><p>编译安装</p><p>先修改CMakeLists.txt<br><code>option(USE_OPENMP &quot;Use OpenMP for parallel code&quot; ON)</code>改为<code>option(USE_OPENMP &quot;Use OpenMP for parallel code&quot; OFF)</code></p><p>编译并安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export CMAKE_PREFIX_PATH=$&#123;CONDA_PREFIX:-&quot;$(dirname $(which conda))/../&quot;&#125;<br>MACOSX_DEPLOYMENT_TARGET=11.1 CC=clang CXX=clang++ python setup.py install<br></code></pre></td></tr></table></figure></li></ol><h4 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h4><p>系统自带Clang，性能也很不错，编译运行之前课程中的C/C++代码相当迅速，但是有一个问题，Clang似乎过于严格，课程中的代码完全是在windows上编写测试的，大部分使用MinGW（GCC），少数使用的WSL中的GCC，基本没有error，在M1上就会报error，不能运行，有点烦😂。</p><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>我用的是Zulu JDK 15，即Azul编译的OpenJDK，下载地址如下<code>https://www.azul.com/downloads/zulu-community/?package=jdk</code>，选macOS arm64，下载安装即可完成配置。</p><p>这里我仅仅测试了Java程序设计中用到的代码是否可行，结果是均可正常运行，包括多线程、图形界面、网络编程、数据流等均可正常运行。</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>我选择尝试一下PostgreSQL，由图灵奖的获得者Michael Ralph Stonebraker最初主持设计开发。直接下载了官网提供的Postgres.app，拖到应用程序里就行了，也可以添加的PATH里便于从终端启动<code>echo /Applications/Postgres.app/Contents/Versions/latest/bin | sudo tee /etc/paths.d/postgresapp</code>，适配M1芯片的版本也在开发中。可以通过Homebrew安装原生的PostgreSQL。卸载方式<code>https://my.oschina.net/wukongcelebrity/blog/304857</code></p><p>用DataGrip连接数据库，测试了一下数据库实验的代码，排除PostgreSQL和MSSQL的差异，都可以正常执行操作且没有问题。</p><h5 id="Qt连接PostgreSQL"><a href="#Qt连接PostgreSQL" class="headerlink" title="Qt连接PostgreSQL"></a>Qt连接PostgreSQL</h5><p>主要参考<code>https://blog.csdn.net/lm409/article/details/76793708</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">otool -L libqsqlpsql.dylib<br>install_name_tool -change /Applications/Postgres.app/Contents/Versions/9.6/lib/libpq.5.dylib /Applications/Postgres.app/Contents/Versions/latest/lib/libpq.5.dylib libqsqlpsql.dylib<br></code></pre></td></tr></table></figure><h4 id="EDA设计"><a href="#EDA设计" class="headerlink" title="EDA设计"></a>EDA设计</h4><p>计算机组成原理和计算体系结构的课程设计均为设计特定要求的CPU，前者是设计一个简单的MIPS风格的CPU，并在此基础上编写一个功能简单的小程序通过Basys3使用，后者则是设计一个具有流水线功能的MIPS风格的CPU，学院提供的是Basys3和Vivado的相关资料，因此不得不使用Vivado了。</p><p>Vivado只有x86的Windows和Linux版本，只能通过虚拟机Windows on arm来运行了，性能损失还是很严重的。Vivado不同版本的运行效果差异巨大，最新版Vivado 2020.2无法Simulation，会无响应，其他均可，而我突发奇想装了Vivado 2018.1可以完美运行，从Simulation、Synthesis到Generate Bit Stream均正常。只能希望微软提升下arm windows的效率，或者Xilinx开发arm版的Vivado吧。</p><p>对计组的课设Synthesis和Implementation以及Generate Bit Stream，i5的电脑大约十分钟左右，而M1虚拟机要十五分钟不到，有点慢了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pintos 安装和适配</title>
    <link href="/post/5117bb8e.html"/>
    <url>/post/5117bb8e.html</url>
    
    <content type="html"><![CDATA[<p>一、安装ubuntu 18.04</p><ol><li>打开microsoft  store 商店获取Ubuntu 18.04，下载安装（温馨提示：使用热点比校园网快）</li></ol><p>二、WSL安装</p><ol><li>打开微软官方教程： <a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">https://docs.microsoft.com/zh-cn/windows/wsl/install-win10</a></li></ol><p>三、下载pintos包和bochs包</p><ol><li><p>bochs  官网下载: <a href="http://bochs.sourceforge.net/">http://bochs.sourceforge.net/</a>       下载2.6.7版本</p></li><li><p>pintos：<a href="https://pintos-os.org/cgi-bin/gitweb.cgi?p=pintos-anon;a=tree;h=refs/heads/master;hb=refs/heads/master">https://pintos-os.org/cgi-bin/gitweb.cgi?p=pintos-anon;a=tree;h=refs/heads/master;hb=refs/heads/master</a><br>点击snapshot 下载安装包</p></li></ol><p>四、将包解压<br>#将包转移至ubuntu目录下，ubuntu目录就是输入cd之后的目录：~ 波浪号</p><img src="/post/5117bb8e/pic1.png" class="" title="图片1"><p>#转移指令 mv<br>mv 目标文件(路径) ~<br>#解压bochs<br>tar zxvf bochs-2.6.7.tar.gz<br>#解压pintos<br>tar zxvf pintos-anon-master-b9454eb.tar.gz<br>#文件夹改名<br>mv pintos-anon-master-b9454eb pintos<br>#解压后：</p><img src="/post/5117bb8e/pic2.png" class="" title="图片2"><p>五、apt更换阿里云源<br>cd /etc/apt<br>vim sources.list<br>#复制以下内容到sources.list文件，直接复制存在换行导致格式问题，需要稍作处理<br>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-security main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-security main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-updates main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-proposed main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-proposed main restricted universe multiverse<br>deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-backports main restricted universe multiverse<br>deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> bionic-backports main restricted universe multiverse<br>#执行以下操作，正常结束即换源成功<br>sudo apt update<br>sudo apt upgrade</p><p>六、ubuntu环境配置<br>sudo apt-get install build-essential<br>sudo apt-get install xorg-dev<br>sudo apt-get install bison<br>sudo apt-get install libgtk2.0-dev<br>sudo apt-get install libc6<br>sudo apt-get install libgcc1<br>sudo apt-get install libstdc++5<br>sudo apt-get install libstdc++6<br>sudo apt-get install libncurses5<br>sudo apt-get install libncurses5 -dev#失败则忽略<br>sudo apt-get install g++-multilib</p><p>七、安装bochs和pintos</p><p>#安装bochs<br>1.到目录下进行配置后make<br>cd bochs-2.6.7<br>sudo ./configure –enable-gdb-stub –with-x –with-x11 –with-term –with-nogui<br>make<br>sudo make install<br>#输入bochs 结果显示如下即是安装成功</p><img src="/post/5117bb8e/pic3.png" class="" title="图片3"><p>#安装pintos<br>1.编辑GDBMACROS变量，将你自己的Pintos完整路径赋给该变量<br>cd pintos/src/utils<br>sudo vim pintos-gdb<br>#完整路径也就是把pintos之前的路径改为<del>/  如下图(</del>为ubuntu目录</p><img src="/post/5117bb8e/pic4.png" class="" title="图片4"><p>2.打开pintos/src/utils 下的Makefile,将LOADLIBES变量名编辑为LDLIBS<br>cd pintos/src/utils<br>sudo vim Makefile<br>3.在/src/utils中输入make来编译utils<br>make<br>4.在points/src/threads并运行来编译线程目录make<br>cd points/src/threads<br>make<br>5.编辑/utils/pintos（〜257行）：替换kernel.bin为完整路径的kernel.bin<br>cd pintos/src/utils<br>sudo vim points<br>#路径更改：前半部分是 /home/你的用户名/pintos/，例如我用户名为king<br>#后半部分为kernel.bin的路径，这个文件在 pintos/src/threads/build 中，#可到对应位置查看进行确认<br>cd pintos/src/threads/build<br>ls</p><img src="/post/5117bb8e/pic5.png" class="" title="图片5"><p>6.编辑/utils/Pintos.pm（362行）：替换loader.bin为完整路径的loader.bin<br>#更改操作和和前一个操作一样，添加完整路径<br>cd pintos/src/utils<br>sudo vim Pintos.pm<br>…<br>#loader.bin 和kernel.bin位于同一个目录下，自行查看</p><p>7.打开~/.bashrc并添加export PATH=/home/…/pintos/src/utils:$PATH到最后一行<br>vim ~/.bashrc<br>export PATH=/home/…/pintos/src/utils:$PATH<br>#…为用户名，与前面一样，如下图</p><img src="/post/5117bb8e/pic6.png" class="" title="图片6"><p>8.重新打开终端输入source ~/.bashrc并运行<br>cd pintos<br>source ~/.bashrc<br>pintos run alarm-multiple<br>#结果如下图大功告成</p><img src="/post/5117bb8e/pic7.jpg" class="" title="图片7">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/post/d95d7e09.html"/>
    <url>/post/d95d7e09.html</url>
    
    <content type="html"><![CDATA[<p>加油！考研人！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
